services:
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    volumes:
      - ./web/src:/var/www/html
    depends_on:
      - redis
      - postgres
      - minio
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${WEB_POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${WEB_MINIO_BUCKET_NAME}
    networks:
      - app-network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./web/src:/var/www/html
    depends_on:
      - web
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - app-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}
      LABEL_STUDIO_POSTGRES_DB: ${LABEL_STUDIO_POSTGRES_DB}
      WEB_POSTGRES_DB: ${WEB_POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  label-studio:
    image: heartexlabs/label-studio:latest
    ports:
      - "8080:8080"
    environment:
      - DJANGO_DB=postgresql
      - POSTGRE_NAME=${LABEL_STUDIO_POSTGRES_DB}
      - POSTGRE_USER=${POSTGRES_USER}
      - POSTGRE_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRE_HOST=postgres
      - POSTGRE_PORT=5432
      - LABEL_STUDIO_HOST=${LABEL_STUDIO_HOST:-http://localhost:8080}
      - LABEL_STUDIO_USERNAME=${LABEL_STUDIO_USER}
      - LABEL_STUDIO_PASSWORD=${LABEL_STUDIO_PASSWORD}
      # MinIO (S3) configuration
      - LABEL_STUDIO_STORAGE_TYPE=s3
      - LABEL_STUDIO_STORAGE_S3_ENDPOINT=http://minio:9000
      - LABEL_STUDIO_STORAGE_S3_ACCESS_KEY=${MINIO_ROOT_USER}
      - LABEL_STUDIO_STORAGE_S3_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - LABEL_STUDIO_STORAGE_S3_BUCKET_NAME=${LABEL_STUDIO_S3_BUCKET_NAME}
      - LABEL_STUDIO_STORAGE_S3_REGION_NAME=${LABEL_STUDIO_S3_REGION_NAME:-us-east-1}
      - LABEL_STUDIO_STORAGE_S3_FILE_LRU_CACHE_TIME=1
      - LABEL_STUDIO_STORAGE_S3_PRESIGN_TTL=3600
      # Use MinIO as the default storage
      - LABEL_STUDIO_STORAGE_PERSISTENCE=1
      - LABEL_STUDIO_REDIS_HOST=redis
      - LABEL_STUDIO_REDIS_PORT=6379
    volumes:
      - label_studio_data:/label-studio/data
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_healthy
    command: label-studio start
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  minio_data:
  postgres_data:
  label_studio_data:
  redis_data:

networks:
  app-network:
    driver: bridge
